plugins {
	id "maven-publish"
	alias libs.plugins.quilt.loom
}

archivesBaseName = project.archives_base_name
version = "${project.mod_version}-${libs.versions.minecraft.get()}"
group = project.maven_group

def javaVersion = 17

repositories {
	maven {
		url "https://maven.shedaniel.me"
	}
	maven {
		url "https://maven.terraformersmc.com"
	}
	maven {
		name = "Ladysnake Mods"
		url = "https://ladysnake.jfrog.io/artifactory/mods"
	}
	maven {
		url = "https://jitpack.io"
	}
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }

	modImplementation libs.quilt.loader

	// QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
	// Quilted Fabric API will automatically pull in the correct QSL version.
	modImplementation libs.quilted.fabric.api
	// modImplementation libs.bundles.quilted.fabric.api // If you wish to use Fabric API's deprecated modules, you can replace the above line with this one

	modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"

	// Replace modImplementation with modApi if you expose components in your own API
	include modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
	include modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}")
	include modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}")

	include annotationProcessor(implementation("com.github.LlamaLad7.MixinExtras:mixinextras-fabric:${project.mixin_extras_version}"))
}

processResources {
	inputs.property "version", project.mod_version

	filesMatching("quilt.mod.json") {
		expand "version": project.mod_version
	}
}

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(javaVersion))
	}

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	 withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from('LICENSE') {
		rename { "${it}_${archivesBaseName}" }
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
